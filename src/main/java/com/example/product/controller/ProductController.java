package com.example.product.controller;

import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import com.example.product.entity.Product;
import com.example.product.service.ProductService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/api/products")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Product API", description = "Endpoints for managing products")
public class ProductController {

    private final ProductService productService;

    @GetMapping
    @Operation(summary = "Get all products", description = "Retrieve a list of all products")
    public ResponseEntity<List<Product>> getAllProducts(Pageable pageable) {
        log.info("Fetching all products with pagination: {}", pageable);
        return ResponseEntity.ok(productService.getAllProducts(pageable));
    }

    @GetMapping("/{id}")
    @Operation(summary = "Get product by ID", description = "Retrieve a product by its ID")
    public ResponseEntity<Product> getProductById(@PathVariable int id) {
        log.info("Fetching product with ID: {}", id);
        return ResponseEntity.ok(productService.getProductById(id));
    }

    @PostMapping
    @Operation(summary = "Add a new product", description = "Create a new product")
    public ResponseEntity<Product> addProduct(@RequestBody Product product) {
        log.info("Adding a new product: {}", product);
        return ResponseEntity.status(HttpStatus.CREATED).body(productService.addProduct(product));
    }

    @PutMapping("/{id}")
    @Operation(summary = "Update a product", description = "Update an existing product")
    public ResponseEntity<Product> updateProduct(@PathVariable int id, @RequestBody Product product) {
        log.info("Updating product with ID: {} with data: {}", id, product);
        return ResponseEntity.ok(productService.updateProduct(id, product));
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "Delete a product", description = "Delete an existing product")
    public ResponseEntity<Void> deleteProduct(@PathVariable int id) {
        log.info("Deleting product with ID: {}", id);
        productService.deleteProduct(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/revenue/total")
    @Operation(summary = "Get total revenue", description = "Retrieve the total revenue from all products")
    public ResponseEntity<Double> getTotalRevenue() {
        log.info("Fetching total revenue");
        return ResponseEntity.ok(productService.getTotalRevenue());
    }

    @GetMapping("/revenue/{productId}")
    @Operation(summary = "Get revenue by product", description = "Retrieve the revenue generated by a specific product")
    public ResponseEntity<Double> getRevenueByProduct(@PathVariable int productId) {
        log.info("Fetching revenue for product with ID: {}", productId);
        return ResponseEntity.ok(productService.getRevenueByProduct(productId));
    }

    @GetMapping("/download/pdf")
    @Operation(summary = "Download product table as PDF", description = "Download the product table in PDF format")
    public ResponseEntity<byte[]> downloadProductTableAsPdf() {
        log.info("Generating PDF for product table");
        byte[] pdfContent = productService.generateProductPdf();
        return ResponseEntity.ok()
                .header("Content-Disposition", "attachment; filename=products.pdf")
                .contentType(MediaType.APPLICATION_PDF)
                .body(pdfContent);
    }
}

